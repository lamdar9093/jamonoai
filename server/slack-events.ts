import express, { Request, Response } from 'express';
import { agentOrchestrator } from './orchestrator';
import { db } from './db';
import { workspaces } from '@shared/schema';
import { eq } from 'drizzle-orm';
import { slackTokenManager } from './slack-token-manager';
import { WebClient } from '@slack/web-api';

// Cache global pour √©viter les r√©ponses multiples
const globalProcessedEvents = new Set<string>();

// Nettoyer le cache toutes les heures
setInterval(() => {
  globalProcessedEvents.clear();
  console.log('üßπ Cache √©v√©nements Slack nettoy√©');
}, 3600000);

/**
 * Gestionnaire d'√©v√©nements Slack en temps r√©el
 * Traite les mentions, DMs et interactions avec les agents
 */
export function setupSlackEvents(app: express.Express) {
  // Endpoint pour les √©v√©nements Slack (webhooks)
  app.post('/api/slack/events', async (req: Request, res: Response) => {
    try {
      const { type, challenge, event } = req.body;

      // V√©rification du challenge Slack
      if (type === 'url_verification') {
        return res.json({ challenge });
      }

      // Traitement des √©v√©nements en temps r√©el
      if (type === 'event_callback' && event) {
        await handleSlackEvent(event);
      }

      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('Erreur √©v√©nement Slack:', error);
      res.status(500).json({ error: 'Erreur traitement √©v√©nement' });
    }
  });

  // Endpoint pour les commandes slash
  app.post('/api/slack/commands', async (req: Request, res: Response) => {
    try {
      const { team_id, user_id, channel_id, text, command } = req.body;
      
      const workspace = await db.select()
        .from(workspaces)
        .where(eq(workspaces.slackTeamId, team_id))
        .limit(1)
        .then(rows => rows[0]);

      if (!workspace) {
        return res.json({
          response_type: 'ephemeral',
          text: 'Workspace non configur√©. Veuillez refaire l\'onboarding.'
        });
      }

      let responseText = '';

      switch (command) {
        case '/nox-status':
          responseText = await getAgentStatus(workspace.id);
          break;
        case '/nox-help':
          responseText = getHelpText();
          break;
        case '/nox-metrics':
          responseText = await getAgentMetrics(workspace.id);
          break;
        default:
          responseText = 'Commande inconnue. Utilisez /nox-help pour voir les commandes disponibles.';
      }

      res.json({
        response_type: 'ephemeral',
        text: responseText
      });
    } catch (error) {
      console.error('Erreur commande slash:', error);
      res.status(500).json({ error: 'Erreur traitement commande' });
    }
  });
}

/**
 * Traite les √©v√©nements Slack (mentions, DMs, etc.)
 */
async function handleSlackEvent(event: any): Promise<void> {
  console.log('üîî √âv√©nement Slack re√ßu:', event.type, event.channel_type);
  
  const { type, text, user, channel, team, channel_type } = event;

  // Ignorer les messages des bots et √©viter les boucles
  if (event.bot_id || event.subtype === 'bot_message' || event.user === 'U090BNRKCT0') {
    console.log('ü§ñ Message de bot ignor√©');
    return;
  }

  // √âviter les r√©ponses multiples - cache global persistant
  const eventKey = `${team}_${user}_${event.ts}`;
  if (globalProcessedEvents.has(eventKey)) {
    console.log('üìù √âv√©nement d√©j√† trait√©, ignor√©');
    return;
  }
  globalProcessedEvents.add(eventKey);

  // Ignorer les messages sans texte
  if (!text || text.trim() === '') {
    console.log('üìù Message vide ignor√©');
    return;
  }

  try {
    // R√©cup√©rer le workspace
    const workspace = await db.select()
      .from(workspaces)
      .where(eq(workspaces.slackTeamId, team))
      .limit(1)
      .then(rows => rows[0]);

    if (!workspace) {
      console.warn(`‚ùå Workspace ${team} non trouv√©`);
      return;
    }

    console.log(`‚úÖ Workspace trouv√©: ${workspace.name}`);

    // Traiter selon le type d'√©v√©nement
    switch (type) {
      case 'app_mention':
        console.log('üì¢ Traitement mention d\'app');
        await handleAppMention(workspace, event);
        break;
      case 'message':
        // V√©rifier si c'est un DM (channel_type = 'im')
        if (channel_type === 'im') {
          console.log('üí¨ Traitement message direct');
          await handleDirectMessage(workspace, event);
        } else {
          console.log('üè¢ Message de canal ignor√© (pas une mention)');
        }
        break;
      default:
        console.log(`ü§∑ Type d'√©v√©nement non trait√©: ${type}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur traitement √©v√©nement Slack:', error);
  }
}

/**
 * Lit l'historique r√©cent d'un canal Slack pour contextualiser la r√©ponse
 */
async function getChannelContext(workspace: any, channelId: string, limit: number = 10): Promise<string> {
  try {
    const validToken = await slackTokenManager.getValidToken(workspace.id);
    if (!validToken) {
      return '';
    }

    const slackClient = new WebClient(validToken);
    const result = await slackClient.conversations.history({
      channel: channelId,
      limit: limit,
      include_all_metadata: false
    });

    if (!result.messages || result.messages.length === 0) {
      return '';
    }

    // Formater les messages r√©cents pour le contexte
    const contextMessages = result.messages
      .filter((msg: any) => !msg.bot_id && msg.text) // Ignorer les messages de bots
      .reverse() // Plus ancien en premier
      .map((msg: any) => `${msg.user}: ${msg.text}`)
      .join('\n');

    return contextMessages ? `\nContexte r√©cent du canal:\n${contextMessages}\n` : '';
  } catch (error) {
    console.warn('Impossible de lire l\'historique du canal:', error);
    return '';
  }
}

/**
 * Traite les mentions d'agents (@NOX, @ATLAS, etc.)
 */
async function handleAppMention(workspace: any, event: any): Promise<void> {
  const { text, user, channel } = event;
  
  // Pour les app_mention, l'agent mentionn√© est toujours NOX (notre app)
  const agentName = 'NOX';
  
  // Nettoyer le message (enlever la mention)
  const cleanMessage = text.replace(/<@\w+>/g, '').trim();
  
  // Obtenir le contexte du canal pour une r√©ponse plus pertinente
  const channelContext = await getChannelContext(workspace, channel, 5);

  try {
    // Orchestrer la r√©ponse via l'orchestrateur avec contexte du canal
    const messageWithContext = channelContext ? `${cleanMessage}${channelContext}` : cleanMessage;
    const response = await agentOrchestrator.handleSlackMention({
      workspaceId: workspace.id,
      slackUserId: user,
      slackChannelId: channel,
      text: messageWithContext,
      agentName
    });

    // Obtenir un token valide et envoyer la r√©ponse
    const validToken = await slackTokenManager.getValidToken(workspace.id);
    if (validToken) {
      await sendSlackResponse(validToken, channel, response, workspace);
    } else {
      console.error(`Token Slack indisponible pour workspace ${workspace.id}`);
    }
  } catch (error) {
    console.error(`Erreur mention agent ${agentName}:`, error);
    const validToken = await slackTokenManager.getValidToken(workspace.id);
    if (validToken) {
      await sendSlackResponse(
        validToken, 
        channel, 
        `D√©sol√©, j'ai rencontr√© une erreur en traitant votre demande: ${(error as any).message}`,
        workspace
      );
    }
  }
}

/**
 * Traite les messages directs aux agents
 */
async function handleDirectMessage(workspace: any, event: any): Promise<void> {
  const { text, user, channel } = event;
  
  // D√©terminer quel agent r√©pondre (par d√©faut NOX)
  const agentName = 'NOX';

  try {
    const response = await agentOrchestrator.handleSlackMention({
      workspaceId: workspace.id,
      slackUserId: user,
      slackChannelId: channel,
      text,
      agentName
    });

    const validToken = await slackTokenManager.getValidToken(workspace.id);
    if (validToken) {
      await sendSlackResponse(validToken, channel, response, workspace);
    }
  } catch (error) {
    console.error('Erreur message direct:', error);
    const validToken = await slackTokenManager.getValidToken(workspace.id);
    if (validToken) {
      await sendSlackResponse(
        validToken, 
        channel, 
        'D√©sol√©, je ne peux pas traiter votre message pour le moment.',
        workspace
      );
    }
  }
}

/**
 * Envoie une r√©ponse dans Slack
 */
async function sendSlackResponse(accessToken: string, channel: string, text: string, workspace: any): Promise<void> {
  try {
    const displayName = workspace?.agentDisplayName || 'NOX';
    const icon = workspace?.agentIcon || ':gear:';
    
    const client = new WebClient(accessToken);
    
    await client.chat.postMessage({
      channel,
      text: text
    });
    
  } catch (error: any) {
    if (error.data?.error === 'token_expired' || error.data?.error === 'invalid_auth') {
      console.error('Token Slack expir√© - Reconnectez l\'int√©gration');
    } else if (error.data?.error === 'channel_not_found') {
      console.log('Canal de test non trouv√© (normal en d√©veloppement)');
    } else {
      console.error('Erreur Slack:', error.data?.error || error.message);
    }
  }
}

/**
 * Utilitaires pour les commandes slash
 */
async function getAgentStatus(workspaceId: number): Promise<string> {
  try {
    const metrics = await agentOrchestrator.getWorkspaceMetrics(workspaceId);
    
    let status = 'ü§ñ *Statut des agents:*\n\n';
    
    for (const { deployment, metrics: agentMetrics } of metrics) {
      const lastActive = deployment.lastActiveAt ? 
        `derni√®re activit√©: ${deployment.lastActiveAt.toLocaleDateString()}` : 
        'jamais actif';
      
      status += `‚Ä¢ Agent ID ${deployment.agentId}: ${deployment.status} (${lastActive})\n`;
    }
    
    return status || 'Aucun agent d√©ploy√©.';
  } catch (error) {
    return 'Erreur lors de la r√©cup√©ration du statut des agents.';
  }
}

function getHelpText(): string {
  return `ü§ñ *Commandes disponibles:*

*Interaction avec les agents:*
‚Ä¢ \`@NOX votre question\` - Poser une question √† NOX
‚Ä¢ Message direct √† NOX pour une conversation priv√©e

*Commandes syst√®me:*
‚Ä¢ \`/nox-status\` - Afficher le statut des agents
‚Ä¢ \`/nox-metrics\` - Voir les m√©triques de performance
‚Ä¢ \`/nox-help\` - Afficher cette aide

*Exemples d'utilisation:*
‚Ä¢ \`@NOX diagnostique le probl√®me de performance du serveur\`
‚Ä¢ \`@NOX g√©n√®re un post-mortem pour l'incident d'hier\`
‚Ä¢ \`@NOX aide-moi √† planifier la migration Kubernetes\``;
}

async function getAgentMetrics(workspaceId: number): Promise<string> {
  try {
    const metrics = await agentOrchestrator.getWorkspaceMetrics(workspaceId);
    
    let metricsText = 'üìä *M√©triques des agents (derni√®res 24h):*\n\n';
    
    for (const { deployment, metrics: agentMetrics } of metrics) {
      const interactions = agentMetrics.filter(m => m.metricType === 'interactions').length;
      const avgResponseTime = agentMetrics
        .filter(m => m.metricType === 'response_time')
        .reduce((sum, m) => sum + m.value, 0) / Math.max(1, agentMetrics.filter(m => m.metricType === 'response_time').length);
      
      metricsText += `*Agent ${deployment.agentId}:*\n`;
      metricsText += `‚Ä¢ Interactions: ${interactions}\n`;
      metricsText += `‚Ä¢ Temps de r√©ponse moyen: ${Math.round(avgResponseTime)}ms\n`;
      metricsText += `‚Ä¢ Statut: ${deployment.status}\n\n`;
    }
    
    return metricsText || 'Aucune m√©trique disponible.';
  } catch (error) {
    return 'Erreur lors de la r√©cup√©ration des m√©triques.';
  }
}